{
  "openapi": "3.0.3",
  "info": {
    "title": "Ultravox",
    "version": "0.1.0",
    "description": "API for the Ultravox service."
  },
  "paths": {
    "/api/accounts": {
      "get": {
        "operationId": "accounts_list",
        "tags": [
          "accounts"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/accounts/me": {
      "get": {
        "operationId": "accounts_me_retrieve",
        "tags": [
          "accounts"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/api_keys": {
      "get": {
        "operationId": "api_keys_list",
        "description": "Gets the current user's API keys.",
        "parameters": [
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "description": "The pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "api_keys"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAPIKeyList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "api_keys_create",
        "description": "Creates a new API key.",
        "tags": [
          "api_keys"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIKeyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKeyCreate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/api_keys/{api_key_prefix}": {
      "get": {
        "operationId": "api_keys_retrieve",
        "description": "Gets an API key.",
        "parameters": [
          {
            "in": "path",
            "name": "api_key_prefix",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "api_keys"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "api_keys_update",
        "description": "Updates an API key.",
        "parameters": [
          {
            "in": "path",
            "name": "api_key_prefix",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "api_keys"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "api_keys_partial_update",
        "description": "Updates an API key.",
        "parameters": [
          {
            "in": "path",
            "name": "api_key_prefix",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "api_keys"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAPIKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "api_keys_destroy",
        "description": "Deletes an API key.",
        "parameters": [
          {
            "in": "path",
            "name": "api_key_prefix",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "api_keys"
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/calls": {
      "get": {
        "operationId": "calls_list",
        "parameters": [
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "description": "The pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "calls"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCallList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "calls_create",
        "parameters": [
          {
            "in": "query",
            "name": "priorCallId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The UUID of a prior call. When specified, the new call will use the same properites as the prior call unless overriden in this request's body. The new call will also use the prior call's message history as its own initial_messages. (It's illegal to also set initial_messages in the body.)"
          }
        ],
        "tags": [
          "calls"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ultravox.v1.StartCallRequest"
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/calls/{call_id}": {
      "get": {
        "operationId": "calls_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "call_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "calls"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/calls/{call_id}/messages": {
      "get": {
        "operationId": "calls_messages_list",
        "parameters": [
          {
            "in": "path",
            "name": "call_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "description": "The pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "calls"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedultravox.v1.MessageList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/calls/{call_id}/recording": {
      "get": {
        "operationId": "calls_recording_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "call_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "calls"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/calls/{call_id}/stages": {
      "get": {
        "operationId": "calls_stages_list",
        "parameters": [
          {
            "in": "path",
            "name": "call_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "description": "The pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "calls"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCallStageList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/calls/{call_id}/stages/{call_stage_id}": {
      "get": {
        "operationId": "calls_stages_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "call_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "call_stage_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "calls"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallStage"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/calls/{call_id}/stages/{call_stage_id}/messages": {
      "get": {
        "operationId": "calls_stages_messages_list",
        "parameters": [
          {
            "in": "path",
            "name": "call_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "call_stage_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "description": "The pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "calls"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginatedultravox.v1.MessageList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/calls/{call_id}/stages/{call_stage_id}/tools": {
      "get": {
        "operationId": "calls_stages_tools_list",
        "parameters": [
          {
            "in": "path",
            "name": "call_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "call_stage_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "calls"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CallTool"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/calls/{call_id}/tools": {
      "get": {
        "operationId": "calls_tools_list",
        "parameters": [
          {
            "in": "path",
            "name": "call_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "calls"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CallTool"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/models": {
      "get": {
        "operationId": "models_list",
        "parameters": [
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "description": "The pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "models"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedModelAliasList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/schema/": {
      "get": {
        "operationId": "schema_retrieve",
        "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "yaml"
              ]
            }
          },
          {
            "in": "query",
            "name": "lang",
            "schema": {
              "type": "string",
              "enum": [
                "af",
                "ar",
                "ar-dz",
                "ast",
                "az",
                "be",
                "bg",
                "bn",
                "br",
                "bs",
                "ca",
                "ckb",
                "cs",
                "cy",
                "da",
                "de",
                "dsb",
                "el",
                "en",
                "en-au",
                "en-gb",
                "eo",
                "es",
                "es-ar",
                "es-co",
                "es-mx",
                "es-ni",
                "es-ve",
                "et",
                "eu",
                "fa",
                "fi",
                "fr",
                "fy",
                "ga",
                "gd",
                "gl",
                "he",
                "hi",
                "hr",
                "hsb",
                "hu",
                "hy",
                "ia",
                "id",
                "ig",
                "io",
                "is",
                "it",
                "ja",
                "ka",
                "kab",
                "kk",
                "km",
                "kn",
                "ko",
                "ky",
                "lb",
                "lt",
                "lv",
                "mk",
                "ml",
                "mn",
                "mr",
                "ms",
                "my",
                "nb",
                "ne",
                "nl",
                "nn",
                "os",
                "pa",
                "pl",
                "pt",
                "pt-br",
                "ro",
                "ru",
                "sk",
                "sl",
                "sq",
                "sr",
                "sr-latn",
                "sv",
                "sw",
                "ta",
                "te",
                "tg",
                "th",
                "tk",
                "tr",
                "tt",
                "udm",
                "ug",
                "uk",
                "ur",
                "uz",
                "vi",
                "zh-hans",
                "zh-hant"
              ]
            }
          }
        ],
        "tags": [
          "schema"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.oai.openapi": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              },
              "application/yaml": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              },
              "application/vnd.oai.openapi+json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/tools": {
      "get": {
        "operationId": "tools_list",
        "parameters": [
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "description": "The pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "tools"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedToolList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "tools_create",
        "tags": [
          "tools"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tool"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "An OpenAPI schema file in either JSON or YAML format."
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tool"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/tools/{tool_id}": {
      "get": {
        "operationId": "tools_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "tool_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "tools"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tool"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "tools_update",
        "parameters": [
          {
            "in": "path",
            "name": "tool_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "tools"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tool"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tool"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "tools_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "tool_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "tools"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/voices": {
      "get": {
        "operationId": "voices_list",
        "parameters": [
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "description": "The pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "voices"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedVoiceList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "voices_create",
        "tags": [
          "voices"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "An audio file containing a sample of the voice to clone."
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Voice"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/voices/{voice_id}": {
      "get": {
        "operationId": "voices_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "voice_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "voices"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Voice"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "voices_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "voice_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "voices"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/webhooks": {
      "get": {
        "operationId": "webhooks_list",
        "parameters": [
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "description": "The pagination cursor value.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "webhooks"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedWebhookList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "webhooks_create",
        "tags": [
          "webhooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/webhooks/{webhook_id}": {
      "get": {
        "operationId": "webhooks_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "webhooks"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "webhooks_update",
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "webhooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "webhooks_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "webhooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedWebhook"
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "webhooks_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "webhook_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": [
          "webhooks"
        ],
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIKey": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "creator": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "A free-form name for the API key. Need not be unique. 50 characters max."
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "title": "Expires",
            "description": "Once API key expires, clients cannot use it anymore."
          },
          "revoked": {
            "type": "boolean",
            "description": "If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)"
          }
        },
        "required": [
          "created",
          "creator",
          "expiryDate",
          "name",
          "prefix"
        ]
      },
      "APIKeyCreate": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "creator": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "secret": {
            "type": "string",
            "readOnly": true,
            "description": "The API key itself. Will be generated on creation but not returned in future requests."
          },
          "revoked": {
            "type": "boolean",
            "readOnly": true,
            "description": "If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)"
          },
          "name": {
            "type": "string",
            "description": "A free-form name for the API key. Need not be unique. 50 characters max.",
            "maxLength": 50
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "title": "Expires",
            "description": "Once API key expires, clients cannot use it anymore."
          }
        },
        "required": [
          "created",
          "creator",
          "name",
          "prefix",
          "revoked",
          "secret"
        ]
      },
      "Account": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true
          },
          "billingUrl": {
            "type": "string",
            "readOnly": true
          },
          "freeTimeUsed": {
            "type": "string",
            "readOnly": true,
            "description": "How much free time has been used by previous (or ongoing) calls."
          },
          "freeTimeRemaining": {
            "type": "string",
            "readOnly": true,
            "description": "How much free call time this account has remaining. (This could increase if an existing call ends without using its maximum duration or an unjoined call times out.)"
          },
          "hasActiveSubscription": {
            "type": "boolean",
            "description": "Whether the account has an active subscription."
          }
        },
        "required": [
          "billingUrl",
          "freeTimeRemaining",
          "freeTimeUsed",
          "hasActiveSubscription",
          "name"
        ]
      },
      "Call": {
        "type": "object",
        "properties": {
          "callId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "clientVersion": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "The version of the client that joined this call."
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "ended": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "endReason": {
            "readOnly": true,
            "nullable": true,
            "description": "The reason the call ended.\n\n* `unjoined` - Client never joined\n* `hangup` - Client hung up\n* `timeout` - Call timed out\n* `connection_error` - Connection error",
            "oneOf": [
              {
                "$ref": "#/components/schemas/EndReasonEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "firstSpeaker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FirstSpeakerEnum"
              }
            ],
            "readOnly": true,
            "description": "Who was supposed to talk first when the call started. Typically set to FIRST_SPEAKER_USER for outgoing calls and left as the default (FIRST_SPEAKER_AGENT) otherwise."
          },
          "inactivityMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.TimedMessage"
            },
            "description": "Messages spoken by the agent when the user is inactive for the specified duration. Durations are cumulative, so a message m > 1 with duration 30s will be spoken 30 seconds after message m-1."
          },
          "initialOutputMedium": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InitialOutputMediumEnum"
              }
            ],
            "readOnly": true,
            "description": "The medium used initially by the agent. May later be changed by the client."
          },
          "joinTimeout": {
            "type": "string",
            "default": "30s"
          },
          "joinUrl": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "languageHint": {
            "type": "string",
            "nullable": true,
            "description": "BCP47 language code that may be used to guide speech recognition.",
            "maxLength": 16
          },
          "maxDuration": {
            "type": "string",
            "default": "3600s"
          },
          "medium": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.CallMedium"
              }
            ],
            "nullable": true
          },
          "model": {
            "type": "string",
            "default": "fixie-ai/ultravox"
          },
          "recordingEnabled": {
            "type": "boolean",
            "writeOnly": true,
            "default": false
          },
          "systemPrompt": {
            "type": "string",
            "nullable": true
          },
          "temperature": {
            "type": "number",
            "format": "double",
            "maximum": 1,
            "minimum": 0,
            "default": 0
          },
          "timeExceededMessage": {
            "type": "string",
            "nullable": true
          },
          "voice": {
            "type": "string",
            "nullable": true
          },
          "transcriptOptional": {
            "type": "boolean",
            "default": true,
            "description": "Indicates whether a transcript is optional for the call."
          }
        },
        "required": [
          "callId",
          "clientVersion",
          "created",
          "endReason",
          "ended",
          "firstSpeaker",
          "initialOutputMedium",
          "joinUrl"
        ]
      },
      "CallStage": {
        "type": "object",
        "properties": {
          "callId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "callStageId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "inactivityMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.TimedMessage"
            },
            "description": "Messages spoken by the agent when the user is inactive for the specified duration. Durations are cumulative, so a message m > 1 with duration 30s will be spoken 30 seconds after message m-1."
          },
          "languageHint": {
            "type": "string",
            "nullable": true,
            "description": "BCP47 language code that may be used to guide speech recognition.",
            "maxLength": 16
          },
          "model": {
            "type": "string",
            "default": "fixie-ai/ultravox"
          },
          "recordingEnabled": {
            "type": "boolean",
            "writeOnly": true,
            "default": false
          },
          "systemPrompt": {
            "type": "string",
            "nullable": true
          },
          "temperature": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "timeExceededMessage": {
            "type": "string",
            "nullable": true
          },
          "voice": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "callId",
          "callStageId",
          "created",
          "temperature"
        ]
      },
      "CallTool": {
        "type": "object",
        "properties": {
          "callToolId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "toolId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "nullable": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The possibly overridden name of the tool."
          },
          "definition": {
            "$ref": "#/components/schemas/ultravox.v1.CallTool"
          }
        },
        "required": [
          "callToolId",
          "definition",
          "name",
          "toolId"
        ]
      },
      "EndReasonEnum": {
        "enum": [
          "unjoined",
          "hangup",
          "timeout",
          "connection_error"
        ],
        "type": "string",
        "description": "* `unjoined` - Client never joined\n* `hangup` - Client hung up\n* `timeout` - Call timed out\n* `connection_error` - Connection error"
      },
      "EventsEnum": {
        "enum": [
          "call.started",
          "call.ended"
        ],
        "type": "string",
        "description": "* `call.started` - Fired when a call starts\n* `call.ended` - Fired when a call ends"
      },
      "FirstSpeakerEnum": {
        "enum": [
          "FIRST_SPEAKER_AGENT",
          "FIRST_SPEAKER_USER"
        ],
        "type": "string"
      },
      "InitialOutputMediumEnum": {
        "enum": [
          "MESSAGE_MEDIUM_VOICE",
          "MESSAGE_MEDIUM_TEXT"
        ],
        "type": "string"
      },
      "ModelAlias": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The alias name."
          }
        },
        "required": [
          "name"
        ]
      },
      "NullEnum": {
        "enum": [
          null
        ]
      },
      "PaginatedAPIKeyList": {
        "type": "object",
        "required": [
          "results"
        ],
        "properties": {
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cD00ODY%3D\""
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cj0xJnA9NDg3"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/APIKey"
            }
          }
        }
      },
      "PaginatedCallList": {
        "type": "object",
        "required": [
          "results"
        ],
        "properties": {
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cD00ODY%3D\""
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cj0xJnA9NDg3"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Call"
            }
          }
        }
      },
      "PaginatedCallStageList": {
        "type": "object",
        "required": [
          "results"
        ],
        "properties": {
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cD00ODY%3D\""
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cj0xJnA9NDg3"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallStage"
            }
          }
        }
      },
      "PaginatedModelAliasList": {
        "type": "object",
        "required": [
          "results"
        ],
        "properties": {
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cD00ODY%3D\""
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cj0xJnA9NDg3"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelAlias"
            }
          }
        }
      },
      "PaginatedToolList": {
        "type": "object",
        "required": [
          "results"
        ],
        "properties": {
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cD00ODY%3D\""
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cj0xJnA9NDg3"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            }
          }
        }
      },
      "PaginatedVoiceList": {
        "type": "object",
        "required": [
          "results"
        ],
        "properties": {
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cD00ODY%3D\""
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cj0xJnA9NDg3"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Voice"
            }
          }
        }
      },
      "PaginatedWebhookList": {
        "type": "object",
        "required": [
          "results"
        ],
        "properties": {
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cD00ODY%3D\""
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cj0xJnA9NDg3"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            }
          }
        }
      },
      "Paginatedultravox.v1.MessageList": {
        "type": "object",
        "required": [
          "results"
        ],
        "properties": {
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cD00ODY%3D\""
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?cursor=cj0xJnA9NDg3"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.Message"
            }
          }
        }
      },
      "PatchedAPIKey": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "creator": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "A free-form name for the API key. Need not be unique. 50 characters max."
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true,
            "title": "Expires",
            "description": "Once API key expires, clients cannot use it anymore."
          },
          "revoked": {
            "type": "boolean",
            "description": "If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)"
          }
        }
      },
      "PatchedWebhook": {
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 200
          },
          "secrets": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 120
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventsEnum"
            }
          }
        }
      },
      "Tool": {
        "type": "object",
        "properties": {
          "toolId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 40
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "definition": {
            "$ref": "#/components/schemas/ultravox.v1.BaseToolDefinition"
          }
        },
        "required": [
          "created",
          "definition",
          "name",
          "toolId"
        ]
      },
      "Voice": {
        "type": "object",
        "properties": {
          "voiceId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "previewUrl": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "description",
          "name",
          "previewUrl",
          "voiceId"
        ]
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "maxLength": 200
          },
          "secrets": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 120
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventsEnum"
            }
          }
        },
        "required": [
          "created",
          "events",
          "url",
          "webhookId"
        ]
      },
      "ultravox.v1.Message": {
        "type": "object",
        "properties": {
          "role": {
            "enum": [
              "MESSAGE_ROLE_UNSPECIFIED",
              "MESSAGE_ROLE_USER",
              "MESSAGE_ROLE_AGENT",
              "MESSAGE_ROLE_TOOL_CALL",
              "MESSAGE_ROLE_TOOL_RESULT"
            ],
            "type": "string",
            "description": "The message's role.",
            "format": "enum"
          },
          "text": {
            "type": "string",
            "description": "The message text for user and agent messages, tool arguments for tool_call messages, tool results for tool_result messages."
          },
          "invocationId": {
            "type": "string",
            "description": "The invocation ID for tool messages. Used to pair tool calls with their results."
          },
          "toolName": {
            "type": "string",
            "description": "The tool name for tool messages."
          },
          "errorDetails": {
            "type": "string",
            "description": "For failed tool calls, additional debugging information. While the text field is\n presented to the model so it can respond to failures gracefully, the full details\n are only exposed via the Ultravox REST API."
          }
        },
        "description": "A message exchanged during a call."
      },
      "google.protobuf.Value": {
        "description": "Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values."
      },
      "ultravox.v1.AutomaticParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the parameter."
          },
          "location": {
            "enum": [
              "PARAMETER_LOCATION_UNSPECIFIED",
              "PARAMETER_LOCATION_QUERY",
              "PARAMETER_LOCATION_PATH",
              "PARAMETER_LOCATION_HEADER",
              "PARAMETER_LOCATION_BODY"
            ],
            "type": "string",
            "description": "Where the parameter is used.",
            "format": "enum"
          },
          "knownValue": {
            "enum": [
              "KNOWN_PARAM_UNSPECIFIED",
              "KNOWN_PARAM_CALL_ID",
              "KNOWN_PARAM_CONVERSATION_HISTORY"
            ],
            "type": "string",
            "description": "The value to set for the parameter.",
            "format": "enum"
          }
        },
        "description": "A parameter that is automatically set by the system."
      },
      "ultravox.v1.BaseClientToolDetails": {
        "type": "object",
        "properties": {},
        "description": "Details for invoking a tool expected to be implemented by the client."
      },
      "ultravox.v1.BaseHttpToolDetails": {
        "type": "object",
        "properties": {
          "baseUrlPattern": {
            "type": "string",
            "description": "The base URL pattern for the tool, possibly with placeholders for path parameters."
          },
          "httpMethod": {
            "type": "string",
            "description": "The HTTP method for the tool."
          }
        },
        "description": "Details for invoking a tool via HTTP."
      },
      "ultravox.v1.BaseToolDefinition": {
        "type": "object",
        "properties": {
          "modelToolName": {
            "type": "string",
            "description": "The name of the tool, as presented to the model. Must match ^[a-zA-Z0-9_-]{1,64}$."
          },
          "description": {
            "type": "string",
            "description": "The description of the tool."
          },
          "dynamicParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.DynamicParameter"
            },
            "description": "The parameters that the tool accepts."
          },
          "staticParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.StaticParameter"
            },
            "description": "The static parameters added when the tool is invoked."
          },
          "automaticParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.AutomaticParameter"
            },
            "description": "Additional parameters that are automatically set by the system when the tool is invoked."
          },
          "requirements": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.ToolRequirements"
              }
            ],
            "description": "Requirements that must be fulfilled when creating a call for the tool to be used."
          },
          "http": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.BaseHttpToolDetails"
              }
            ],
            "description": "Details for an HTTP tool."
          },
          "client": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.BaseClientToolDetails"
              }
            ],
            "description": "Details for a client-implemented tool. Only body parameters are allowed\n for client tools."
          }
        },
        "description": "The base definition of a tool that can be used during a call. Exactly one\n implementation (http or client) should be set."
      },
      "ultravox.v1.CallMedium": {
        "type": "object",
        "properties": {
          "webRtc": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.CallMedium_WebRtcMedium"
              }
            ],
            "description": "The call will use WebRTC with the Ultravox client SDK.\n This is the default."
          },
          "twilio": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.CallMedium_TwilioMedium"
              }
            ],
            "description": "The call will use Twilio's \"Media Streams\" protocol.\n Once you have a join URL from starting a call, include it in your\n TwiML like so:\n <Connect><Stream url=${your-join-url} /></Connect>\n This works for both inbound and outbound calls."
          },
          "serverWebSocket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.CallMedium_WebSocketMedium"
              }
            ],
            "description": "The call will use a plain websocket connection. This is unlikely to yield an acceptable user\n experience if used from a browser or mobile client, but may be suitable for a\n server-to-server connection. This option provides a simple way to connect your own server to\n an Ultravox inference instance."
          },
          "telnyx": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.CallMedium_TelnyxMedium"
              }
            ],
            "description": "The call will use Telnyx's media streaming protocol.\n Once you have a join URL from starting a call, include it in your\n TexML like so:\n <Connect><Stream url=${your-join-url} /></Connect>\n This works for both inbound and outbound calls."
          },
          "plivo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.CallMedium_PlivoMedium"
              }
            ],
            "description": "The call will use Plivo's AudioStreams protocol.\n Once you have a join URL from starting a call, include it in your\n Plivo XML like so:\n <Stream keepCallAlive=\"true\" bidirectional=\"true\" contentType=\"audio/x-mulaw;rate=8000\">${your-join-url}</Stream>\n This works for both inbound and outbound calls."
          }
        },
        "description": "Details about a call's protocol. By default, calls occur over WebRTC using\n the Ultravox client SDK. Setting a different call medium will prepare the\n server for a call using a different protocol.\n At most one call medium may be set."
      },
      "ultravox.v1.CallMedium_PlivoMedium": {
        "type": "object",
        "properties": {},
        "description": "Details for a Plivo call."
      },
      "ultravox.v1.CallMedium_TelnyxMedium": {
        "type": "object",
        "properties": {},
        "description": "Details for a Telnyx call."
      },
      "ultravox.v1.CallMedium_TwilioMedium": {
        "type": "object",
        "properties": {},
        "description": "Details for a Twilio call."
      },
      "ultravox.v1.CallMedium_WebRtcMedium": {
        "type": "object",
        "properties": {},
        "description": "Details for a WebRTC call."
      },
      "ultravox.v1.CallMedium_WebSocketMedium": {
        "type": "object",
        "properties": {
          "inputSampleRate": {
            "type": "integer",
            "description": "The sample rate for input (user) audio. Required.",
            "format": "int32"
          },
          "outputSampleRate": {
            "type": "integer",
            "description": "The desired sample rate for output (agent) audio. If unset, defaults to the input_sample_rate.",
            "format": "int32"
          },
          "clientBufferSizeMs": {
            "type": "integer",
            "description": "The size of the client-side audio buffer in milliseconds. Smaller buffers allow for faster\n interruptions but may cause audio underflow if network latency fluctuates too greatly. For\n the best of both worlds, set this to some large value (e.g. 30000) and implement support for\n playback_clear_buffer messages. Defaults to 60.",
            "format": "int32"
          }
        },
        "description": "Details for a WebSocket call."
      },
      "ultravox.v1.CallTool": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the tool."
          },
          "dynamicParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.DynamicParameter"
            },
            "description": "The parameters presented to the model."
          },
          "staticParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.StaticParameter"
            },
            "description": "Parameters added unconditionally when the tool is invoked."
          },
          "automaticParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.AutomaticParameter"
            },
            "description": "Parameters automatically set by the system."
          },
          "http": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.HttpCallToolDetails"
              }
            ],
            "description": "Details for an HTTP tool."
          },
          "client": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.ClientCallToolDetails"
              }
            ],
            "description": "Details for a client-implemented tool. Only body parameters are allowed\n for client tools."
          }
        },
        "description": "A tool as used for a particular call (omitting auth details)."
      },
      "ultravox.v1.ClientCallToolDetails": {
        "type": "object",
        "properties": {},
        "description": "Details for a CallTool implemented by the client."
      },
      "ultravox.v1.DynamicParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the parameter."
          },
          "location": {
            "enum": [
              "PARAMETER_LOCATION_UNSPECIFIED",
              "PARAMETER_LOCATION_QUERY",
              "PARAMETER_LOCATION_PATH",
              "PARAMETER_LOCATION_HEADER",
              "PARAMETER_LOCATION_BODY"
            ],
            "type": "string",
            "description": "Where the parameter is used.",
            "format": "enum"
          },
          "schema": {
            "type": "object",
            "description": "The JsonSchema definition of the parameter. This typically\n includes things like type, description, enum values, format,\n other restrictions, etc."
          },
          "required": {
            "type": "boolean",
            "description": "Whether the parameter is required."
          }
        },
        "description": "A dynamic parameter the tool accepts that may be set by the model."
      },
      "ultravox.v1.HeaderApiKeyRequirement": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the header."
          }
        },
        "description": "A security requirement that will cause an API key to be added to the header."
      },
      "ultravox.v1.HttpAuthRequirement": {
        "type": "object",
        "properties": {
          "scheme": {
            "type": "string",
            "description": "The scheme of the HTTP authentication, e.g. \"Bearer\"."
          }
        },
        "description": "A security requirement that will cause an HTTP authentication header to be added."
      },
      "ultravox.v1.HttpCallToolDetails": {
        "type": "object",
        "properties": {
          "baseUrlPattern": {
            "type": "string",
            "description": "The base URL pattern for the tool, possibly with placeholders for path parameters."
          },
          "httpMethod": {
            "type": "string",
            "description": "The HTTP method for the tool."
          },
          "authHeaders": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Auth headers added when the tool is invoked."
          },
          "authQueryParams": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Auth query parameters added when the tool is invoked."
          }
        },
        "description": "Details for a CallTool implemented via HTTP requests."
      },
      "ultravox.v1.QueryApiKeyRequirement": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the query parameter."
          }
        },
        "description": "A security requirement that will cause an API key to be added to the query string."
      },
      "ultravox.v1.SecurityOptions": {
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.SecurityRequirements"
            },
            "description": "The options for security. Only one must be met. The first one that can be\n satisfied will be used in general. The single exception to this rule is\n that we always prefer a non-empty set of requirements over an empty set\n unless no non-empty set can be satisfied."
          }
        },
        "description": "The different options for satisfying a tool's security requirements."
      },
      "ultravox.v1.SecurityRequirement": {
        "type": "object",
        "properties": {
          "queryApiKey": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.QueryApiKeyRequirement"
              }
            ],
            "description": "An API key must be added to the query string."
          },
          "headerApiKey": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.HeaderApiKeyRequirement"
              }
            ],
            "description": "An API key must be added to a custom header."
          },
          "httpAuth": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.HttpAuthRequirement"
              }
            ],
            "description": "The HTTP authentication header must be added."
          }
        },
        "description": "A single security requirement that must be met for a tool to be available. Exactly one\n of query_api_key, header_api_key, or http_auth should be set."
      },
      "ultravox.v1.SecurityRequirements": {
        "type": "object",
        "properties": {
          "requirements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ultravox.v1.SecurityRequirement"
            },
            "description": "Requirements keyed by name."
          }
        },
        "description": "The security requirements for a request. All requirements must be met."
      },
      "ultravox.v1.SelectedTool": {
        "type": "object",
        "properties": {
          "toolId": {
            "type": "string",
            "description": "The ID of an existing base tool."
          },
          "toolName": {
            "type": "string",
            "description": "The name of an existing base tool. The name must uniquely identify the tool."
          },
          "temporaryTool": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.BaseToolDefinition"
              }
            ],
            "description": "A temporary tool definition, available only for this call (and subsequent\n calls created using priorCallId without overriding selected tools)."
          },
          "nameOverride": {
            "type": "string",
            "description": "An override for the model_tool_name. This is primarily useful when using\n multiple instances of the same durable tool (presumably with different\n parameter overrides.) The set of tools used within a call must have a unique\n set of model names and every name must match this pattern: ^[a-zA-Z0-9_-]{1,64}$."
          },
          "authTokens": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Auth tokens used to satisfy the tool's security requirements."
          },
          "parameterOverrides": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/google.protobuf.Value"
            },
            "description": "Static values to use in place of dynamic parameters. Any parameter included\n here will be hidden from the model and the static value will be used instead.\n Some tools may require certain parameters to be overridden, but any parameter\n can be overridden regardless of whether it is required to be."
          }
        },
        "description": "A tool selected for a particular call. Exactly one of tool_id, tool_name, or\n temporary_tool should be set."
      },
      "ultravox.v1.StartCallRequest": {
        "type": "object",
        "properties": {
          "systemPrompt": {
            "type": "string",
            "description": "The system prompt provided to the model during generations."
          },
          "temperature": {
            "type": "number",
            "description": "The model temperature, between 0 and 1. Defaults to 0.",
            "format": "float"
          },
          "model": {
            "type": "string",
            "description": "The model used for generations. Defaults to fixie-ai/ultravox."
          },
          "voice": {
            "type": "string",
            "description": "The ID (or name if unique) of the voice the agent should use for this call."
          },
          "languageHint": {
            "type": "string",
            "description": "A BCP47 language code that may be used to guide speech recognition and synthesis."
          },
          "initialMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.Message"
            },
            "description": "The conversation history to start from for this call."
          },
          "joinTimeout": {
            "pattern": "^-?(?:0|[1-9][0-9]{0,11})(?:\\.[0-9]{1,9})?s$",
            "type": "string",
            "description": "A timeout for joining the call. Defaults to 30 seconds."
          },
          "maxDuration": {
            "pattern": "^-?(?:0|[1-9][0-9]{0,11})(?:\\.[0-9]{1,9})?s$",
            "type": "string",
            "description": "The maximum duration of the call. Defaults to 1 hour."
          },
          "timeExceededMessage": {
            "type": "string",
            "description": "What the agent should say immediately before hanging up if the call's time limit is reached."
          },
          "inactivityMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.TimedMessage"
            },
            "description": "Messages spoken by the agent when the user is inactive for the specified duration.\n Durations are cumulative, so a message m > 1 with duration 30s will be spoken 30 seconds after message m-1."
          },
          "selectedTools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ultravox.v1.SelectedTool"
            },
            "description": "The tools available to the agent for (the first stage of) this call."
          },
          "medium": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.CallMedium"
              }
            ],
            "description": "The medium used for this call."
          },
          "initiator": {
            "enum": [
              "INITIATOR_UNSPECIFIED",
              "INITIATOR_USER",
              "INITIATOR_AGENT"
            ],
            "type": "string",
            "description": "Who was responsible for staring this call. Typically set to agent for outgoing calls and left as the default (user) otherwise.\n DEPRECATED: Use first_speaker instead. Will be removed in November 2024.",
            "format": "enum"
          },
          "recordingEnabled": {
            "type": "boolean",
            "description": "Whether the call should be recorded."
          },
          "firstSpeaker": {
            "enum": [
              "FIRST_SPEAKER_UNSPECIFIED",
              "FIRST_SPEAKER_AGENT",
              "FIRST_SPEAKER_USER"
            ],
            "type": "string",
            "description": "Who should talk first when the call starts. Typically set to FIRST_SPEAKER_USER for outgoing\n calls and left as the default (FIRST_SPEAKER_AGENT) otherwise.",
            "format": "enum"
          },
          "transcriptOptional": {
            "type": "boolean",
            "description": "Indicates whether a transcript is optional for the call."
          },
          "initialOutputMedium": {
            "enum": [
              "MESSAGE_MEDIUM_UNSPECIFIED",
              "MESSAGE_MEDIUM_VOICE",
              "MESSAGE_MEDIUM_TEXT"
            ],
            "type": "string",
            "description": "The medium to use for the call initially. May be altered by the client later.\n Defaults to voice.",
            "format": "enum"
          }
        },
        "description": "A request to start a call."
      },
      "ultravox.v1.StaticParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the parameter."
          },
          "location": {
            "enum": [
              "PARAMETER_LOCATION_UNSPECIFIED",
              "PARAMETER_LOCATION_QUERY",
              "PARAMETER_LOCATION_PATH",
              "PARAMETER_LOCATION_HEADER",
              "PARAMETER_LOCATION_BODY"
            ],
            "type": "string",
            "description": "Where the parameter is used.",
            "format": "enum"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/google.protobuf.Value"
              }
            ],
            "description": "The value of the parameter."
          }
        },
        "description": "A static parameter that is unconditionally added when the tool is invoked. This\n parameter is not exposed to or set by the model."
      },
      "ultravox.v1.TimedMessage": {
        "type": "object",
        "properties": {
          "duration": {
            "pattern": "^-?(?:0|[1-9][0-9]{0,11})(?:\\.[0-9]{1,9})?s$",
            "type": "string",
            "description": "The duration after which the message should be spoken."
          },
          "message": {
            "type": "string",
            "description": "The message to speak."
          },
          "endBehavior": {
            "enum": [
              "END_BEHAVIOR_UNSPECIFIED",
              "END_BEHAVIOR_HANG_UP_SOFT",
              "END_BEHAVIOR_HANG_UP_STRICT"
            ],
            "type": "string",
            "description": "The behavior to exhibit when the message is finished being spoken.",
            "format": "enum"
          }
        },
        "description": "A message the agent should say after some duration. The duration's meaning\n varies depending on the context."
      },
      "ultravox.v1.ToolRequirements": {
        "type": "object",
        "properties": {
          "httpSecurityOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ultravox.v1.SecurityOptions"
              }
            ],
            "description": "Security requirements for an HTTP tool."
          },
          "requiredParameterOverrides": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Dynamic parameters that must be overridden with an explicit (static) value."
          }
        },
        "description": "The requirements for using a tool, which must be satisfied when creating a call with the tool."
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.ultravox.ai"
    }
  ]
}